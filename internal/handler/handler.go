package handler

import (
	"bot-vk/internal/service"
	"encoding/json"
	"fmt"
	"log"

	"github.com/go-vk-api/vk"
	lp "github.com/go-vk-api/vk/longpoll/user"
)

type Handler struct {
	services *service.Service
}

func NewHandler(services *service.Service) *Handler {
	return &Handler{services: services}
}

func (h *Handler) HandleMessage(update *lp.Update) *vk.RequestParams {

	switch data := update.Data.(type) {
	case *lp.NewMessage:

		h.services.ViewService.AddView(data.Text, fmt.Sprint(data.PeerID), "VK")

		switch data.Text {
		case "–ù–∞—á–∞—Ç—å":

			var message string

			h.services.UserService.AddUser(data.PeerID, "Vk_name", "Vk_lastname", "Vk_username", "VK")

			keys, err := h.services.KeyboardService.GetMainKeyboard()
			if err != nil {
				log.Panic(err)
			}

			message = "–°—Ä–æ—á–Ω–æ –Ω—É–∂–Ω—ã –¥–µ–Ω—å–≥–∏? üò≥\n–î–æ—Ä–æ–≥–∏–µ –¥—Ä—É–∑—å—è! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –ø–æ–º–æ—â–∏!\n–ï—Å–ª–∏ –≤—ã –ø–æ–ø–∞–ª–∏ –≤ —Ç—è–∂—ë–ª—É—é —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é —Å–∏—Ç—É–∞—Ü–∏—é –∏–ª–∏ –Ω–µ –∑–Ω–∞–µ—Ç–µ –≥–¥–µ –≤–∑—è—Ç—å –¥–µ–Ω—å–≥–∏ –¥–æ –ó–ü, —Ç–æ –º–∏–ª–æ—Å—Ç–∏ –ø—Ä–æ—Å–∏–º! ü§ó\n–ù–∏–∂–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã —Å–∞–º—ã–µ –Ω–∞–¥–µ–∂–Ω—ã–µ –∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã –º–∏–∫—Ä–æ–∑–∞–π–º–æ–≤ —Å –≤—ã—Å–æ–∫–∏–º –æ–¥–æ–±—Ä–µ–Ω–∏–µ–º. –ù–∞ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–µ —Ä–µ—Å—É—Ä—Å–æ–≤ –µ—Å—Ç—å –∞–∫—Ü–∏—è \"–ü–µ—Ä–≤—ã–π –∑–∞–π–º –ø–æ–¥ 0%\". –ö–∞–∂–¥—ã–π —Ä–∞–∑ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–æ–≤—É—é –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–µ—Ä–µ–ø–ª–∞—Ç. –ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ —É–∫–ª–∞–¥—ã–≤–∞—Ç—å—Å—è –≤ –±–µ—Å–ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥ ‚è≥"

			b_keys, err := json.Marshal(keys)
			if err != nil {
				log.Panic(err)
			}

			obj := &vk.RequestParams{
				"peer_id":   data.PeerID,
				"message":   message,
				"keyboard":  string(b_keys),
				"random_id": 0,
			}
			return obj
		case "–ó–∞–π–º—ã":
			var message string

			keys, err := h.services.KeyboardService.GetCategoriesInlineKeyboard()
			if err != nil {
				log.Panic(err)
			}

			message = "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã: "

			b_keys, err := json.Marshal(keys)
			if err != nil {
				log.Panic(err)
			}

			obj := &vk.RequestParams{
				"peer_id":   data.PeerID,
				"message":   message,
				"keyboard":  string(b_keys),
				"random_id": 0,
			}
			return obj
		case "–†–æ—Å—Å–∏—è":
			var message string

			keys, err := h.services.KeyboardService.GetProductInlineKeyboard(data.Text)
			if err != nil {
				log.Panic(err)
			}

			message = "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã: "

			b_keys, err := json.Marshal(keys)
			if err != nil {
				log.Panic(err)
			}

			obj := &vk.RequestParams{
				"peer_id":   data.PeerID,
				"message":   message,
				"keyboard":  string(b_keys),
				"random_id": 0,
			}
			return obj
		case "–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω":
			var message string

			keys, err := h.services.KeyboardService.GetProductInlineKeyboard(data.Text)
			if err != nil {
				log.Panic(err)
			}

			message = "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã: "

			b_keys, err := json.Marshal(keys)
			if err != nil {
				log.Panic(err)
			}

			obj := &vk.RequestParams{
				"peer_id":   data.PeerID,
				"message":   message,
				"keyboard":  string(b_keys),
				"random_id": 0,
			}
			return obj
		case "–ö—Ä–µ–¥–∏—Å—Ç–æ—Ä–∏—è":
			var message string

			keys, err := h.services.KeyboardService.GetHistoryInlineKeyboard()
			if err != nil {
				log.Panic(err)
			}

			message = "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—Ä–µ–¥–∏—Å—Ç–æ—Ä–∏–∏"

			b_keys, err := json.Marshal(keys)
			if err != nil {
				log.Panic(err)
			}

			obj := &vk.RequestParams{
				"peer_id":   data.PeerID,
				"message":   message,
				"keyboard":  string(b_keys),
				"random_id": 0,
			}
			return obj
		case "–ë–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–æ":
			var message string

			keys, err := h.services.KeyboardService.GetBankInlineKeyboard()
			if err != nil {
				log.Panic(err)
			}

			message = "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–∞"

			b_keys, err := json.Marshal(keys)
			if err != nil {
				log.Panic(err)
			}

			obj := &vk.RequestParams{
				"peer_id":   data.PeerID,
				"message":   message,
				"keyboard":  string(b_keys),
				"random_id": 0,
			}
			return obj
		case "–û–°–ê–ì–û":
			var message string

			keys, err := h.services.KeyboardService.GetOSAGOInlineKeyboard()
			if err != nil {
				log.Panic(err)
			}

			message = "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –û–°–ê–ì–û"

			b_keys, err := json.Marshal(keys)
			if err != nil {
				log.Panic(err)
			}

			obj := &vk.RequestParams{
				"peer_id":   data.PeerID,
				"message":   message,
				"keyboard":  string(b_keys),
				"random_id": 0,
			}
			return obj
		}
	}
	return nil
}
